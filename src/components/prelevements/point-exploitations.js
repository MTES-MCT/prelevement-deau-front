'use client'

import {useEffect, useState} from 'react'

import {AccountCircle, ExpandMore} from '@mui/icons-material'
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Alert,
  Chip,
  Divider,
  Grid2,
  Typography
} from '@mui/material'
import {orderBy} from 'lodash-es'

import Loading from '@/app/prelevements/[id]/loading.js'
import Document from '@/components/document.js'
import VolumesChart from '@/components/prelevements/volumes-chart.js'
import Regles from '@/components/regles.js'
import formatDate from '@/lib/format-date.js'

const statuts = {
  'En activité': 'primary',
  Terminée: 'success',
  Abandonnée: 'error',
  'non renseigné': ''
}

const LabelValue = ({label, value}) => {
  if (value) {
    return (
      <div>
        <b>{label} : </b>
        <i>{value}</i>
      </div>
    )
  }
}

function getPreleveurInfo(preleveur) {
  if (preleveur.nom) {
    return `${preleveur.civilite || ''} ${preleveur.nom} ${preleveur.prenom || ''}`
  }

  return preleveur.raison_sociale || preleveur.sigle
}

const PointExploitations = ({pointPrelevement, exploitations}) => {
  const [isLoading, setIsLoading] = useState(false)
  const [expanded, setExpanded] = useState(false)
  const [error, setError] = useState(null)
  const [exploitationsWithVolumes, setExploitationsWithVolumes] = useState([])

  const handleChange = panel => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : false)
  }

  useEffect(() => {
    async function sortExploitations() {
      setIsLoading(true)
      try {
        const orderedByDateFinExploitations = exploitations.sort((a, b) => {
          if (a.date_fin === undefined) {
            return -1
          }

          if (b.date_fin === undefined) {
            return 1
          }

          return b.id_exploitation - a.id_exploitation
        })

        const orderedExploitationsWithVolumes = orderedByDateFinExploitations.sort((a, b) => {
          if (a.statut === 'En activité' && b.statut === 'En activité') {
            return new Date(b.date_debut) - new Date(a.date_debut)
          }

          if (a.statut === 'En activité' && b.statut !== 'En activité') {
            return -1
          }

          if (a.statut !== 'En activité' && b.statut === 'En activité') {
            return 1
          }

          return 0
        })

        setExploitationsWithVolumes(orderedExploitationsWithVolumes)
        setIsLoading(false)
      } catch (error) {
        console.error(error)
        setError(error)
      }
    }

    sortExploitations()
  }, [exploitations])

  return (
    <div className='fr-pb-5w'>
      <Typography variant='h6' sx={{ml: 3}}>
        Exploitation
      </Typography>
      <div className='m-0 p-0 sm:m-2 sm:p-3'>
        {exploitationsWithVolumes.length > 0 ? exploitationsWithVolumes.map(exploitation => {
          const documents = exploitation.documents.map(document => ({
            ...document,
            dateSignature: new Date(document.date_signature)
          }))
          const orderedDocuments = orderBy(documents, ['dateSignature'], ['desc'])
          const preleveur = pointPrelevement.preleveurs.find(b => b.id_preleveur === exploitation.id_preleveur)

          return (
            <Accordion
              key={exploitation.id_exploitation}
              expanded={expanded === exploitation.id_exploitation}
              onChange={handleChange(exploitation.id_exploitation)}
            >
              <AccordionSummary expandIcon={<ExpandMore />}>
                <div className='flex gap-1 sm:gap-5 flex-col sm:flex-row justify-between items-start sm:items-center w-full'>
                  <div className='flex-1 flex gap-1'>
                    <AccountCircle />
                    <Typography className='px-2'>
                      <b>{getPreleveurInfo(preleveur)}</b>
                    </Typography>
                    ({exploitation.usages.join(', ')})
                  </div>
                  <div className='flex-1 flex gap-2 pr-0 sm:pr-3 flex-col sm:flex-row justify-end items-start sm:items-center'>
                    <Typography className='px-0 sm:px-2'>
                      <i>
                        ({formatDate(exploitation.date_debut)} - {formatDate(exploitation.date_fin) || 'en cours '})
                      </i>
                    </Typography>
                    <Chip label={exploitation.statut} color={statuts[exploitation.statut]} />
                  </div>
                </div>
              </AccordionSummary>
              <AccordionDetails>
                {error && (
                  <Alert severity='error'>{error}</Alert>
                )}
                {expanded === exploitation.id_exploitation && (
                  <VolumesChart idExploitation={exploitation.id_exploitation} />
                )}
                <Grid2
                  container
                  sx={{
                    gap: 2,
                    justifyContent: 'space-between'
                  }}
                >
                  <LabelValue label='Raison abandon' value={exploitation.raison_abandon} />
                  <LabelValue label='Remarque' value={exploitation.remarque} />
                </Grid2>
                <Grid2>
                  <Divider sx={{m: 2}} textAlign='left'>
                    Documents
                  </Divider>
                  {orderedDocuments.map(document => (
                    <Document key={document.id_document} document={document} />
                  ))}
                </Grid2>
                <Grid2>
                  <Divider sx={{m: 2}} textAlign='left'>
                    Règles
                  </Divider>
                  {exploitation.regles.length > 0 ? (
                    <Regles
                      regles={exploitation.regles}
                      documents={exploitation.documents}
                    />
                  ) : (
                    <Typography>Aucune règle</Typography>
                  )}
                </Grid2>
              </AccordionDetails>
            </Accordion>
          )
        }) : (
          <div>
            <i>Pas d’exploitation</i>
          </div>
        )}
        {isLoading && (
          <Loading />
        )}
      </div>
    </div>
  )
}

export default PointExploitations
