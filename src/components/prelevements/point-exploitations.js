'use client'

import {useEffect, useState} from 'react'

import Button from '@codegouvfr/react-dsfr/Button'
import {Typography} from '@mui/material'
import {useRouter} from 'next/navigation'

import ExploitationListItem from '../exploitations/exploitation-list-item.js'

import Loading from '@/components/ui/loading.js'

const PointExploitations = ({pointPrelevement, exploitations}) => {
  const router = useRouter()
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [exploitationsWithVolumes, setExploitationsWithVolumes] = useState([])

  useEffect(() => {
    async function sortExploitations() {
      setIsLoading(true)
      try {
        const orderedByDateFinExploitations = exploitations.sort((a, b) => {
          if (a.date_fin === undefined) {
            return -1
          }

          if (b.date_fin === undefined) {
            return 1
          }

          return b.id_exploitation - a.id_exploitation
        })

        const orderedExploitationsWithVolumes = orderedByDateFinExploitations.sort((a, b) => {
          if (a.statut === 'En activité' && b.statut === 'En activité') {
            return new Date(b.date_debut) - new Date(a.date_debut)
          }

          if (a.statut === 'En activité' && b.statut !== 'En activité') {
            return -1
          }

          if (a.statut !== 'En activité' && b.statut === 'En activité') {
            return 1
          }

          return 0
        })

        setExploitationsWithVolumes(orderedExploitationsWithVolumes)
        setIsLoading(false)
      } catch (error) {
        console.error(error)
        setError(error)
      }
    }

    sortExploitations()
  }, [exploitations])

  return (
    <div className='fr-pb-5w'>
      <div className='flex justify-between'>
        <Typography variant='h6' sx={{ml: 3}}>
          Exploitations
        </Typography>
        <Button
          priority='secondary'
          iconId='fr-icon-add-line'
          onClick={() => router.push('/exploitations/new')}
        >
          Créer une exploitation
        </Button>
      </div>
      <div className='m-0 p-0 sm:m-2 sm:p-3'>
        {exploitationsWithVolumes.length > 0 ? exploitationsWithVolumes.map(exploitation => {
          const documents = exploitation.documents.map(document => ({
            ...document,
            dateSignature: new Date(document.date_signature)
          }))

          const preleveur = pointPrelevement.preleveurs.find(b => b.id_preleveur === exploitation.id_preleveur)

          return (
            <ExploitationListItem
              key={exploitation.id_exploitation}
              documents={documents}
              preleveur={preleveur}
              exploitation={exploitation}
              error={error}
            />
          )
        }) : (
          <div>
            <i>Pas d’exploitation</i>
          </div>
        )}
        {isLoading && (
          <Loading />
        )}
      </div>
    </div>
  )
}

export default PointExploitations
