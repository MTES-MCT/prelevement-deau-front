/* eslint-disable camelcase */
'use client'

import {useEffect, useState} from 'react'

import Input from '@codegouvfr/react-dsfr/Input'
import SearchBar from '@codegouvfr/react-dsfr/SearchBar'
import Select from '@codegouvfr/react-dsfr/SelectNext'
import dynamic from 'next/dynamic'

import ReglesForm from './regles-form.js'

import SearchAutocomplete from '@/components/form/search-autocomplete.js'
import AccordionCentered from '@/components/ui/accordion-centered.js'

const DynamicCheckbox = dynamic(
  () => import('@codegouvfr/react-dsfr/Checkbox'),
  {ssr: false}
)

function displayPreleveur(preleveur) {
  if (preleveur.nom) {
    return `${preleveur.civilite} ${preleveur.nom} ${preleveur.prenom}`
  }

  if (preleveur.sigle) {
    return preleveur.sigle
  }

  if (preleveur.raison_sociale) {
    return preleveur.raison_sociale
  }
}

const statutsExploitation = [
  'En activité',
  'Terminée',
  'Abandonnée',
  'Non renseigné'
]

const usagesExploitation = [
  'Eau potable',
  'Agriculture',
  'Camion citerne',
  'Eau embouteillée',
  'Hydroélectricité',
  'Industrie',
  'Thermalisme',
  'Non renseigné',
  'Autre'
]

const ExploitationForm = ({points, preleveurs, setExploitation}) => {
  const [isExpanded, setIsExpanded] = useState(false)
  const [usages, setUsages] = useState([])

  const handleUsages = (e, usage) => {
    if (e.target.checked) {
      setUsages(prev => [...prev, usage])
    } else {
      setUsages(prev => prev.filter(u => u !== usage))
    }
  }

  useEffect(() => {
    if (usages.length > 0) {
      setExploitation(prev => ({...prev, usages}))
    }
  }, [usages, setExploitation])

  return (
    <div>
      <div className='w-full grid grid-cols-2 gap-4 pb-5'>
        <div className='pb-5'>
          <p className='pb-2'>Associer un point de prélèvement *</p>
          <SearchBar
            label='Rechercher un point de prélèvement'
            renderInput={({className, id, placeholder, type}) => (
              <SearchAutocomplete
                options={points.map(point => ({
                  point,
                  label: `${point.nom} - ${point.id_point}`
                }))}
                className={className}
                id={id}
                placeholder={placeholder}
                type={type}
                onChange={(e, value) => setExploitation(prev => ({
                  ...prev,
                  id_point: value.point.id_point
                }))}
              />
            )}
          />
        </div>
        <div className='pb-5'>
          <p className='pb-2'>Associer un préleveur *</p>
          <SearchBar
            label='Rechercher un préleveur'
            renderInput={({className, id, placeholder, type}) => (
              <SearchAutocomplete
                options={preleveurs.map(preleveur => ({
                  preleveur,
                  label: displayPreleveur(preleveur)
                }))}
                className={className}
                id={id}
                placeholder={placeholder}
                type={type}
                onChange={(e, value) => setExploitation(prev => ({
                  ...prev,
                  id_preleveur: value.preleveur.id_preleveur
                }))}
              />
            )}
          />
        </div>
      </div>
      <div className='w-full grid grid-cols-2 gap-4'>
        <Input
          label='Début de validité *'
          nativeInputProps={{
            type: 'date',
            onChange: e => setExploitation(prev => ({...prev, date_debut: e.target.value}))
          }}
        />
        <Input
          label='Fin de validité'
          nativeInputProps={{
            type: 'date',
            onChange: e => setExploitation(prev => ({...prev, date_fin: e.target.value}))
          }}
        />
      </div>
      <Select
        label='Statut *'
        placeholder='Sélectionner un statut'
        nativeSelectProps={{
          onChange: e => setExploitation(prev => ({
            ...prev,
            statut: e.target.value
          }))
        }}
        options={statutsExploitation.map(statut => ({
          value: statut,
          label: statut
        }))}
      />
      <DynamicCheckbox
        small
        legend='Usages *'
        options={usagesExploitation.map(usage => ({
          value: usage,
          label: usage,
          nativeInputProps: {
            onChange: e => handleUsages(e, usage)
          }
        }))}
        orientation='horizontal'
      />
      <Input
        textArea
        label='Remarque'
        nativeTextAreaProps={{
          placeholder: 'Entrer une remarque',
          onChange: e => setExploitation(prev => ({...prev, remarque: e.target.value}))
        }}
      />
      <AccordionCentered
        isExpanded={isExpanded}
        setIsExpanded={setIsExpanded}
        label='la gestion des règles'
      >
        <ReglesForm setExploitation={setExploitation} />
      </AccordionCentered>
    </div>
  )
}

export default ExploitationForm
