'use client'

import {useEffect, useState} from 'react'

import {Alert} from '@codegouvfr/react-dsfr/Alert'
import Button from '@codegouvfr/react-dsfr/Button'
import {ExpandMore} from '@mui/icons-material'
import {
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Divider,
  Grid2,
  Typography,
  Box
} from '@mui/material'
import {orderBy} from 'lodash-es'
import {useRouter} from 'next/navigation'

import {getStatutColors} from './legend-colors.js'

import {getPointPrelevement, getPreleveur} from '@/app/api/points-prelevement.js'
import Document from '@/components/document.js'
import VolumesChart from '@/components/prelevements/volumes-chart.js'
import Regles from '@/components/regles.js'
import formatFullDateFr, {isOver} from '@/lib/format-date.js'

const LabelValue = ({label, value}) => {
  if (value) {
    return (
      <div>
        <b>{label} : </b>
        <i>{value}</i>
      </div>
    )
  }
}

function getPreleveurName(preleveur) {
  if (preleveur.nom) {
    return `${preleveur.civilite || ''} ${preleveur.nom} ${preleveur.prenom || ''}`
  }

  return preleveur.raison_sociale || preleveur.sigle
}

const ExploitationListItem = ({exploitation, documents, error, isPreleveurDisplayed}) => {
  const router = useRouter()
  const [expanded, setExpanded] = useState(false)
  const [pointName, setPointName] = useState()
  const [preleveur, setPreleveur] = useState(null)
  const [fetchedError, setFetchedError] = useState(null)

  const orderedDocuments = orderBy(documents, ['dateSignature'], ['desc'])

  const handleChange = panel => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : false)
  }

  useEffect(() => {
    const fetchPointsPrelevement = async () => {
      const point = await getPointPrelevement(exploitation.id_point)
      setPointName(point.nom)
    }

    const fetchPreleveurData = async () => {
      try {
        const preleveurData = await getPreleveur(exploitation.id_preleveur) // ✅ Renommé
        setPreleveur(preleveurData)
      } catch (error) {
        setFetchedError(error)
      }
    }

    if (exploitation?.id_point) {
      fetchPointsPrelevement()
    }

    if (isPreleveurDisplayed) {
      fetchPreleveurData()
    }
  }, [exploitation, isPreleveurDisplayed])

  if (fetchedError) {
    throw fetchedError
  }

  return (
    <Accordion
      expanded={expanded === exploitation.id_exploitation}
      onChange={handleChange(exploitation.id_exploitation)}
    >
      <AccordionSummary expandIcon={<ExpandMore />}>
        <Box
          className='w-full flex justify-between mr-3 gap-1'
          sx={{
            flexDirection: {xs: 'column', sm: 'row'}
          }}
        >
          <Box sx={{display: 'flex', gap: 2, alignItems: 'center'}}>
            {preleveur ? (
              <Box className='flex-1 flex gap-1'>
                <Typography variant='body1' color='primary'>
                  <Box
                    component='span'
                    className={`${
                      preleveur.raison_sociale ? 'fr-icon-building-line' : 'fr-icon-user-line'
                    }`}
                  />
                </Typography>
                <Typography className='px-2'>{getPreleveurName(preleveur)}</Typography>
                ({exploitation.usages.join(', ')})
              </Box>
            ) : (
              <Box>
                <Typography>{pointName}</Typography>

                <Typography
                  fontWeight='light'
                  fontStyle='italic'
                  className='fr-text--sm'
                >
                  {exploitation.date_fin
                    ? `${formatFullDateFr(exploitation.date_debut)} - ${
                      isOver(exploitation.date_debut)
                        ? formatFullDateFr(exploitation.date_fin)
                        : 'en cours'
                    }`
                    : `Débutée le ${formatFullDateFr(exploitation.date_debut)}`}
                </Typography>
              </Box>
            )}
          </Box>

          <p
            className='fr-badge fr-badge--sm h-fit p-1'
            style={{
              backgroundColor: getStatutColors(exploitation.statut)?.color,
              color: getStatutColors(exploitation.statut)?.textColor
            }}
          >
            {exploitation.statut}
          </p>
        </Box>
      </AccordionSummary>

      <AccordionDetails>
        <div className='flex justify-end p-3'>
          <Button
            priority='secondary'
            size='small'
            iconId='fr-icon-edit-line'
            onClick={() =>
              router.push(`/exploitations/${exploitation.id_exploitation}/edit`)}
          >
            Éditer
          </Button>
        </div>

        {error && <Alert severity='error' description={error} />}

        {expanded === exploitation.id_exploitation && (
          <VolumesChart idExploitation={exploitation.id_exploitation} />
        )}

        <Grid2
          container
          sx={{
            gap: 2,
            justifyContent: 'space-between'
          }}
        >
          <LabelValue label='Raison abandon' value={exploitation.raison_abandon} />
          <LabelValue label='Remarque' value={exploitation.remarque} />
        </Grid2>

        <Grid2>
          <Divider sx={{m: 2}} textAlign='left'>
            Documents
          </Divider>

          {orderedDocuments.map(document => (
            <Document key={document.id_document} document={document} />
          ))}
        </Grid2>

        <Grid2>
          <Divider sx={{m: 2}} textAlign='left'>
            Règles
          </Divider>

          {exploitation.regles.length > 0 ? (
            <Regles regles={exploitation.regles} documents={exploitation.documents} />
          ) : (
            <Typography>Aucune règle</Typography>
          )}
        </Grid2>
      </AccordionDetails>
    </Accordion>
  )
}

export default ExploitationListItem
