'use client'

import {useEffect, useState} from 'react'

import {getExploitation} from '@/app/api/points-prelevement.js'
import ExploitationListItem from '@/components/exploitations/exploitation-list-item.js'
import BorderedSection from '@/components/ui/bordered-section.js'
import Loading from '@/components/ui/loading.js'
import {getExploitationCreationURL} from '@/lib/urls.js'

const ExploitationsSection = ({exploitations}) => {
  const [isLoading, setIsLoading] = useState(true)
  const [fetchError, setFetchError] = useState(null)
  const [exploitationsWithVolumes, setExploitationsWithVolumes] = useState([])

  useEffect(() => {
    const fetchDetails = async () => {
      setIsLoading(true)

      if (exploitations && exploitations.length > 0) {
        try {
          const results = await Promise.all(
            exploitations.map(async exploitation => {
              const result = await getExploitation(exploitation.id_exploitation)
              if (!result) {
                throw new Error(`Exploitation ${exploitation.id_exploitation} introuvable`)
              }

              return result
            })
          )

          const sorted = results.sort((a, b) => {
            const aActif = a.statut === 'En activité'
            const bActif = b.statut === 'En activité'

            // 1. En activité en premier
            if (aActif && !bActif) {
              return -1
            }

            if (!aActif && bActif) {
              return 1
            }

            // 2. Tri secondaire
            if (aActif && bActif) {
              // Tri par date_debut décroissante
              return new Date(b.date_debut) - new Date(a.date_debut)
            }

            // Tri par date_fin décroissante
            const aDateFin = a.date_fin ? new Date(a.date_fin) : new Date(0)
            const bDateFin = b.date_fin ? new Date(b.date_fin) : new Date(0)
            return bDateFin - aDateFin
          })

          setExploitationsWithVolumes(sorted)
          setIsLoading(false)
        } catch (error) {
          setFetchError(error)
        }
      } else {
        setIsLoading(false)
      }
    }

    fetchDetails()
  }, [exploitations])

  if (fetchError) {
    throw fetchError
  }

  return (
    <BorderedSection
      title='Exploitations'
      linkPath={getExploitationCreationURL()}
      icon='add-line'
      buttonLabel='Créer une exploitation'
    >
      {isLoading ? (
        <Loading />
      ) : (
        exploitationsWithVolumes.length > 0 ? (
          exploitationsWithVolumes.map(exploitation => (
            <ExploitationListItem
              key={exploitation._id}
              exploitation={exploitation}
              documents={exploitation.documents}
            />
          ))
        ) : (
          <p className='mt-4 text-gray-500'>Aucune exploitation</p>
        )
      )}
    </BorderedSection>
  )
}

export default ExploitationsSection
